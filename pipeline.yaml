AWSTemplateFormatVersion: '2010-09-09'
Description: >
  ECR repos, SecretsManager, CodeBuild, CodePipeline (with test/lint + deploy to EKS).

Parameters:
  GitHubToken:
    Type: String
    Description: ARN of a secret in SecretsManager holding your GitHub OAuth token.
  GitHubRepoOwner:
    Type: String
    Default: ion-group
  GitHubRepoName:
    Type: String
    Default: cloud-engineer-graduate-test
  GitHubBranch:
    Type: String
    Default: main
  EKSClusterName:
    Type: String
    Default: hello-app-cluster
  DBName:
    Type: String
    Default: hello_db
  DBUser:
    Type: String
    Default: hello_user

Resources:

  ### 0. Artifact Bucket ###
  ArtifactBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub codepipeline-artifacts-${AWS::AccountId}
      VersioningConfiguration:
        Status: Enabled

  ### 1. ECR Repositories ###
  HelloDbRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: hello-db

  HelloFrontendRepo:
    Type: AWS::ECR::Repository
    Properties:
      RepositoryName: hello-frontend

  ### 2. Secrets Manager ###
  DbCredentialsSecret:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: hello-app/db-credentials
      Description: "DB credentials for hello-app"
      SecretString: !Sub |
        {
          "username": "${DBUser}",
          "dbname": "${DBName}"
        }

  ### 3.1 CodeBuild: Build & Test Project ###
  HelloAppBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: hello-app-build
      Source:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref "AWS::Region"
          - Name: ECR_DB_REPO
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/hello-db"
          - Name: ECR_FE_REPO
            Value: !Sub "${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/hello-frontend"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      TimeoutInMinutes: 30

  ### 3.2 CodeBuild: Deploy to EKS ###
  HelloAppDeployProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: hello-app-deploy
      Source:
        Type: CODEPIPELINE
      Environment:
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/standard:6.0
        Type: LINUX_CONTAINER
        EnvironmentVariables:
          - Name: EKS_CLUSTER
            Value: !Ref EKSClusterName
          - Name: SECRET_ARN
            Value: !Ref DbCredentialsSecret
          - Name: AWS_DEFAULT_REGION
            Value: !Ref "AWS::Region"
      ServiceRole: !GetAtt CodeBuildServiceRole.Arn
      Artifacts:
        Type: CODEPIPELINE
      TimeoutInMinutes: 20

  ### 4. IAM Role for CodeBuild ###
  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: hello-app-codebuild-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codebuild.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodeBuildPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:GetDownloadUrlForLayer
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                  - ecr:CreateRepository
                Resource: "*"
              - Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource: !Ref DbCredentialsSecret
              - Effect: Allow
                Action:
                  - eks:DescribeCluster
                Resource: "*"
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::codepipeline-artifacts-${AWS::AccountId}/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup          
                  - logs:CreateLogStream         
                  - logs:PutLogEvents            
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/codebuild/*

  ### 5. CodePipeline ###
  HelloAppPipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: GitHubSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: '1'
              Configuration:
                Owner: !Ref GitHubRepoOwner
                Repo:  !Ref GitHubRepoName
                Branch: !Ref GitHubBranch
                OAuthToken: !Sub "{{resolve:secretsmanager:${GitHubToken}:SecretString:token}}"
              OutputArtifacts:
                - Name: SourceOutput

        - Name: Build
          Actions:
            - Name: BuildAndTest
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: SourceOutput
              OutputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref HelloAppBuildProject

        - Name: Deploy
          Actions:
            - Name: DeployToEKS
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: '1'
              InputArtifacts:
                - Name: BuildOutput
              Configuration:
                ProjectName: !Ref HelloAppDeployProject
                #BuildspecOverride: buildspec-deploy.yml
                BuildspecOverride: |
                    version: 0.2
                    phases:
                      install:
                        commands:
                          - curl -o kubectl https://s3.us-west-2.amazonaws.com/amazon-eks/1.21.9/2022-03-15/bin/linux/amd64/kubectl
                          - chmod +x kubectl; mv kubectl /usr/local/bin/
                          - curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscli.zip"
                          - unzip awscli.zip; ./aws/install

                      pre_build:
                        commands:
                          - aws eks update-kubeconfig --name $EKS_CLUSTER --region $AWS_DEFAULT_REGION

                      build:
                        commands:
                          - echo "Retrieving DB credentials from Secrets Manager..."
                          - SECRET_JSON=$(aws secretsmanager get-secret-value --secret-id $SECRET_ARN --query SecretString --output text)
                          - USERNAME=$(echo $SECRET_JSON | jq -r .username)
                          - PASSWORD=$(echo $SECRET_JSON | jq -r .password)
                          - DBNAME=$(echo $SECRET_JSON | jq -r .dbname)
                          - |
                            cat <<EOF > k8s/db-secret.yaml
                            apiVersion: v1
                            kind: Secret
                            metadata:
                              name: db-credentials
                              namespace: hello-app
                            type: Opaque
                            stringData:
                              DB_USER: $USERNAME
                              DB_PASS: $PASSWORD
                              DB_NAME: $DBNAME
                            EOF
                          - echo "Applying Kubernetes manifests..."
                          - kubectl apply -f k8s/namespace.yaml
                          - kubectl apply -f k8s/db-secret.yaml
                          - kubectl apply -f k8s/postgres-deployment.yaml
                          - kubectl apply -f k8s/postgres-service.yaml
                          - kubectl apply -f k8s/frontend-deployment.yaml
                          - kubectl apply -f k8s/frontend-service.yaml

                    artifacts:
                      files:
                        - '**/*'

  ### 6. CodePipeline IAM Role ###
  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: hello-app-codepipeline-role
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: codepipeline.amazonaws.com
            Action: sts:AssumeRole
      Path: "/"
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Resource:
                  - !GetAtt HelloAppBuildProject.Arn
                  - !GetAtt HelloAppDeployProject.Arn
              - Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:PutObject
                Resource: !Sub arn:aws:s3:::codepipeline-artifacts-${AWS::AccountId}/*
              - Effect: Allow
                Action:
                  - iam:PassRole
                Resource:
                  - !GetAtt CodeBuildServiceRole.Arn
